// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ReadReposApiV1ReposGetData, ReadReposApiV1ReposGetResponses, GetRepoApiV1ReposRepoNameTreeBranchGetData, GetRepoApiV1ReposRepoNameTreeBranchGetResponses, GetRepoApiV1ReposRepoNameTreeBranchGetErrors, GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetData, GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetResponses, GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetErrors, GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetData, GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetResponses, GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetErrors, RootGetData, RootGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Read Repos
 */
export const readReposApiV1ReposGet = <ThrowOnError extends boolean = false>(options?: Options<ReadReposApiV1ReposGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadReposApiV1ReposGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/repos/',
        ...options
    });
};

/**
 * Get Repo
 */
export const getRepoApiV1ReposRepoNameTreeBranchGet = <ThrowOnError extends boolean = false>(options: Options<GetRepoApiV1ReposRepoNameTreeBranchGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRepoApiV1ReposRepoNameTreeBranchGetResponses, GetRepoApiV1ReposRepoNameTreeBranchGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/repos/{repo_name}/tree/{branch}',
        ...options
    });
};

/**
 * Get Dir Content
 */
export const getDirContentApiV1ReposRepoNameTreeBranchDirNamesGet = <ThrowOnError extends boolean = false>(options: Options<GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetResponses, GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/repos/{repo_name}/tree/{branch}/{dir_names}',
        ...options
    });
};

/**
 * Get File Content
 */
export const getFileContentApiV1ReposRepoNameBlobBranchFileNameGet = <ThrowOnError extends boolean = false>(options: Options<GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetResponses, GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/repos/{repo_name}/blob/{branch}/{file_name}',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RootGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};