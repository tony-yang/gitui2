// This file is auto-generated by @hey-api/openapi-ts

/**
 * DirectoryContent
 * Class representing all the sub-dir and files of a directory.
 */
export type DirectoryContent = {
    /**
     * Parent Directories
     * A parent directory from repo root leading up to this directory content.
     */
    parent_directories?: string | null;
    /**
     * Directories
     * All the sub-dirs in this directory.
     */
    directories?: Array<unknown> | null;
    /**
     * Files
     * All the files in this directory.
     */
    files?: Array<unknown> | null;
};

/**
 * DirectoryResponse
 * Class for a single Directory within a Git Repo.
 */
export type DirectoryResponse = {
    /**
     * Repo Name
     * The repo name.
     */
    repo_name?: string | null;
    /**
     * Repo Url
     * The repo URL.
     */
    repo_url?: string | null;
    /**
     * Repo Description
     * Optional repo description.
     */
    repo_description?: string | null;
    /**
     * Selected Branch
     * The selected git branch
     */
    selected_branch?: string | null;
    /**
     * Branches
     * All branches within the repo
     */
    branches?: Array<string> | null;
    /**
     * Last Commit Message
     */
    last_commit_message?: string | null;
    /**
     * Last Commit Time
     */
    last_commit_time?: string | null;
    /**
     * Last Commit Author
     */
    last_commit_author?: string | null;
    /**
     * Holds current directory content, if it is a valid directory in the git repo.
     */
    content?: DirectoryContent | null;
};

/**
 * FileResponse
 * Class for a single file within a Git Repo.
 */
export type FileResponse = {
    /**
     * Repo Name
     * The repo name.
     */
    repo_name?: string | null;
    /**
     * Repo Url
     * The repo URL.
     */
    repo_url?: string | null;
    /**
     * Repo Description
     * Optional repo description.
     */
    repo_description?: string | null;
    /**
     * Branch
     * The git branch
     */
    branch?: string | null;
    /**
     * Last Commit Message
     */
    last_commit_message?: string | null;
    /**
     * Last Commit Time
     */
    last_commit_time?: string | null;
    /**
     * Last Commit Author
     */
    last_commit_author?: string | null;
    /**
     * Content
     * Holds file content, if it is a valid file in the git repo.
     */
    content?: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * RepoResponse
 * Class for a single Git Repo.
 */
export type RepoResponse = {
    /**
     * Name
     * The repo name.
     */
    name?: string | null;
    /**
     * Url
     * The repo URL.
     */
    url?: string | null;
    /**
     * Description
     * Optional repo description.
     */
    description?: string | null;
    /**
     * Last Commit Message
     */
    last_commit_message?: string | null;
    /**
     * Last Commit Time
     */
    last_commit_time?: string | null;
    /**
     * Last Commit Author
     */
    last_commit_author?: string | null;
    /**
     * Holds repo directory content, if it is a valid directory in the git repo.
     */
    content?: DirectoryContent | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type ReadReposApiV1ReposGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/repos/';
};

export type ReadReposApiV1ReposGetResponses = {
    /**
     * Response Read Repos Api V1 Repos  Get
     * Successful Response
     */
    200: Array<RepoResponse>;
};

export type ReadReposApiV1ReposGetResponse = ReadReposApiV1ReposGetResponses[keyof ReadReposApiV1ReposGetResponses];

export type GetRepoApiV1ReposRepoNameTreeBranchGetData = {
    body?: never;
    path: {
        /**
         * Repo Name
         */
        repo_name: string;
        /**
         * Branch
         */
        branch: string;
    };
    query?: never;
    url: '/api/v1/repos/{repo_name}/tree/{branch}';
};

export type GetRepoApiV1ReposRepoNameTreeBranchGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRepoApiV1ReposRepoNameTreeBranchGetError = GetRepoApiV1ReposRepoNameTreeBranchGetErrors[keyof GetRepoApiV1ReposRepoNameTreeBranchGetErrors];

export type GetRepoApiV1ReposRepoNameTreeBranchGetResponses = {
    /**
     * Successful Response
     */
    200: DirectoryResponse;
};

export type GetRepoApiV1ReposRepoNameTreeBranchGetResponse = GetRepoApiV1ReposRepoNameTreeBranchGetResponses[keyof GetRepoApiV1ReposRepoNameTreeBranchGetResponses];

export type GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetData = {
    body?: never;
    path: {
        /**
         * Repo Name
         */
        repo_name: string;
        /**
         * Branch
         */
        branch: string;
        /**
         * Dir Names
         */
        dir_names: string;
    };
    query?: never;
    url: '/api/v1/repos/{repo_name}/tree/{branch}/{dir_names}';
};

export type GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetError = GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetErrors[keyof GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetErrors];

export type GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetResponses = {
    /**
     * Successful Response
     */
    200: DirectoryResponse;
};

export type GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetResponse = GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetResponses[keyof GetDirContentApiV1ReposRepoNameTreeBranchDirNamesGetResponses];

export type GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetData = {
    body?: never;
    path: {
        /**
         * Repo Name
         */
        repo_name: string;
        /**
         * Branch
         */
        branch: string;
        /**
         * File Name
         */
        file_name: string;
    };
    query?: never;
    url: '/api/v1/repos/{repo_name}/blob/{branch}/{file_name}';
};

export type GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetError = GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetErrors[keyof GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetErrors];

export type GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetResponses = {
    /**
     * Successful Response
     */
    200: FileResponse;
};

export type GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetResponse = GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetResponses[keyof GetFileContentApiV1ReposRepoNameBlobBranchFileNameGetResponses];

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseURL: 'http://host.docker.internal:8000' | (string & {});
};